<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2009-2015 Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<document>

  <properties>
    <title>Overview</title>
    <author email="roland@jolokia.org">Roland Huss</author>
  </properties>

  <head>
    <meta name="description" content="Jolokia is an alternative to JSR-160 connectors for remote JMX access. It provides REST-like access to JMX with JSON over HTTP."/>
    <!--
    <script type="text/javascript" src="js/flattr.js"></script>
    -->
  </head>

  <body>
    <div class="teaser">
      <strong>Jolokia</strong> is remote JMX with JSON over HTTP.<br/>
      <div class="subtitle">It is fast, simple, polyglot and has unique features.
      It's JMX on <a href="http://en.wikipedia.org/wiki/Capsaicin">Capsaicin</a>.</div>
    </div>
    <p>
      Jolokia is a JMX-HTTP bridge giving an alternative to JSR-160
      connectors.  It is an agent based approach with support for many
      platforms. In addition to basic JMX operations it enhances JMX
      remoting with unique features like bulk requests and fine grained
      security policies.
    </p>
    <subsection name="Starting points">
      <!--
      <div style="float:right; margin-right: 5px; margin-left: 5px">
        <div style="float: right; margin-left: 5px; margin-right: 5px;">
          <a class="FlattrButton" style="display:none; float: right;"
             href="http://www.jolokia.org"></a>
        </div>
      </div>
      -->
      <ul>
        <li>
          Overview of <a href="features-nb.html">features</a> which
          make Jolokia unique for JMX remoting.
        </li>
        <li>
          The <a href="documentation.html">documentation</a> includes
          a <a href="tutorial.html">tutorial</a> and a <a
          href="reference/html/index.html">reference manual</a>.
        </li>
        <li>
          <a href="agent.html">Agents</a> exist for many
          platforms (Java EE, OSGi, Mule, JVM).
        </li>
        <li>
          <a href="support.html">Support</a> is available through various channels.
        </li>
        <li>
          <a  href="support.html#Source">Contributions</a> are highly appreciated, too.
        </li>
      </ul>
      <span style="clear: both;"></span>
    </subsection>
    <section name="News">
      <subsection name="1.6.2 with support for multiple CAs">
        <div class="news-date">2019-06-20</div>
        <p>
          This summer version 1.6.2 comes with support for multiple CAs when running the Jolokia agent in SSL mode. This is especially useful when used together with newer versions of OpenShift.
        </p>
      </subsection>
      <subsection name="Minor updates coming with 1.6.1">
        <div class="news-date">2019-05-01</div>
        <p>
          1.6.1 is coming quite late although many of its features are available since quite some time. Apologies for that, it was a busy time for me (but not so much for Jolokia).
        </p>
        <p>
          This release contains one relevant security check which hardens the CORS handling a bit further. Additional some minor goodies are added, please check the <a href="changes-report.html">changelog</a> for details.
        </p>
        <p>
          So, what's next? Jolokia is currently not close to the top of my priority list at the moment. It won't be, and I will work on security fixes promptly when reported. However, the most important update to Java 9 as well the release of Jolokia 2.0 with JMX notification support is currently put on ice.
        </p>
        <p>
          Said that it's currently a perfect moment to jump in to boost Jolokia development. We've got the <a href="https://github.com/jolokia/">jolokia</a> donated, so one of the next larger moves would move this personal pet project to a more solid foundation. If you are interested in helping shaping Jolokia 2.0 which is then ready for Java 9 and support for monitoring platforms like Prometheus, then let's talk.
        </p>
        <p>
          In any case, enjoy the summer. Happy hacking ;-)
        </p>
      </subsection>
      <subsection name="WAR-Agent secured by default in 1.6.0">
        <div class="news-date">2018-06-25</div>
        <p>
          As <a href="https://matmannion.com/jolokiapwn/">reported</a> by security consultant Mat Mannion, there is a massive set of
          Jolokia agents reachable unsecured from the Internet. While its obviously not recommended to run Jolokia unsecured or even expose it publicly,
          authentication is enabled now by default in <code>jolokia.war</code>. So in order to continue to the <a href="https://jolokia.org/agent/war.html">WAR-agent</a> you have to setup
          your servlet's container authentication to associate enabled users with the role "jolokia" (like by adding it to <code>tomcat-users.xml</code>).
        </p>
        <p>
          For quick experiments or when you insist somehow to avoid authentication, then you can use the newly added <a href="http://repo1.maven.org/maven2/org/jolokia/jolokia-war-unsecured/1.6.0/">jolokia-unsecured.war</a>.
          Of course you are still free to mangle the <code>web.xml</code> within either war agent.
        </p>
        <p>
          That said, I still recommend the <a href="https://jolokia.org/reference/html/agents.html#agents-jvm">JAR agent</a> over the WAR agent for most cases, as it has much more flexible security options, included HTTPS encryption with client certificate authentication.
          See the <a href="https://jolokia.org/reference/html/agents.html#agents-jvm">reference manual</a> for all security options.
        </p>
      </subsection>
      <subsection name="Security fixes with 1.5.0">
       <div class="news-date">2018-02-08</div>
        <p>
          Two security issues for Jolokia have recently been discovered by Olga Barinova of
          <a href="https://www.gdssecurity.com/">Gotham Digital Science</a>:
        </p>
        <ul>
          <li>The Jolokia <a href="https://jolokia.org/reference/html/proxy.html">JMX proxy mode</a> is vulnerable
            to remote code execution in a specific scenario. Note that this
          only affects the <a href="https://jolokia.org/reference/html/agents.html#agents-war">WAR agent</a>, which has the proxy mode enabled by default.
            The <a href="https://jolokia.org/reference/html/agents.html#agents-jvm">JVM agent</a> is not affected as it does not support the JMX proxy mode</li>
          <li>An XSS attack can be performed by manipulating the <code>mimeType</code> query parameter to coerce the Web browser to
            display the JSON response directly. However, we consider the impact quite low, as Jolokia responses are <em>not</em>
            shown directly in the browser but used by a JavaScript library, which has to perform its own escaping of user
            provided response data. Jolokia 1.5.0 fixes this hole nevertheless.
          </li>
        </ul>
        <p>
          Jolokia 1.5.0 now fixes these issue in the following way:
        </p>
        <p>
          As a first measure, the JMX proxy mode is <strong>disabled by default</strong> for the WAR agent.
          You can switch it on if you need as usual by adding the relevant configuration to <code>web.xml</code>.
          But you can now also enable the proxy mode without touching <code>jolokia.war</code>:
          By setting a Java system property or an environment variable, the proxy mode
          can be switched on again, too.
          These parameters can be easily added to the startup script of your servlet container.
        </p>
        <p>
          Also, you can now configure a whitelist with allowed patterns for the JMX service URL used as
          the target URL of the proxy.
          These patterns are supposed to be contained in a plain text file, line by line.
          This file then can be referenced by a system property, an env variable or directly configured in <code>web.xml</code>
          in the war file.
        </p>
        <p>
          For the configuration options of the Jolokia proxy please refer to
          the <a href="https://jolokia.org/reference/html/proxy.html">Proxy Mode</a> section of the reference manual.
        </p>
        <p>
          Finally, we always recommend using a dedicated server when using the JMX proxy mode, e.g. a Jetty or Tomcat servlet container.
          These servers should be protected by requiring some authentication. The authentication setup is specific to the
          Java EE server but you have to edit the Jolokia WAR agent to enable authentication as described in the <a href="https://jolokia.org/reference/html/agents.html#agent-war-security">Security Setup</a> chapter in the reference manual.
        </p>
        <p>
          For closing the XSS vulnerability, nothing extra needs to be configured.
          Jolokia now just verifies that only <code>text/plain</code> and <code>application/json</code> is allowed as the
          value of the query parameter <code>mimeType</code> and falls back to plain <code>text/plain</code> if something
          different is provided.
        </p>
        <p>
          It is <strong>highly recommended</strong> to upgrade to Jolokia 1.5.0 if you are relying on the <strong>JMX JSR-160 proxy</strong> feature and to
          revisit your security setup around the proxy server.
        </p>
        <p>
          Big Kudos go out to GDS (and especially to Olga Barinova and Martin Hopkins) for openly reporting these issues in deep
          detail to me and being very cooperative in helping to fix these. Also to R3, for whom GDS was working when these issues
          were discovered, who encouraged GDS to report them. Highly appreciated!
        </p>
      </subsection>
      <subsection name="2018 Kick-Off with Jolokia 1.4.0">
        <div class="news-date">2018-01-23</div>
        <p>
          Jolokia 1.4.0 is the first release in 2018 (happy new year to everyone btw ;-) and brings some small new
          features and fixes (you find the full list in the <a href="changes-report.html">changelog</a>)
        </p>
        <ul>
          <li>CORS header 'Access-Control-Max-Age' fixed</li>
          <li>Update of HTTP client libraries for the Java client</li>
          <li>Add debian package generation for the agent</li>
          <li>JVM Agent supports now IBM JVM 8</li>
          <li>
            Removed internal class <code>ChunkedWriter</code> which accidentally includes parts of the internal Java class
            <code>StreamEncoder</code>
          </li>
        </ul>
        <p>
          Even when the minor bug fixes or feature changes might not make you considering an upgrade, the last point
          is important. The Jolokia version from 1.3.4 to 1.3.7 included a class <code>ChunkedWriter</code> which in
          turn included some parts of the Java internal class <code>StreamEncoder</code>, which is released under the
          GPL. As you might know Jolokia is released under the APL which is not compatible to the GPL. The affected
          class has been removed so everything is clean again (to the best of my knowledge).
        </p>
        <p>
          Sorry for any inconvenience. If you any questions to this version or implication, please create an
          issue at the <a href="https://github.com/rhuss/jolokia">GitHub</a> project.
        </p>
      </subsection>
      <subsection name="Small 1.3.7">
        <div class="news-date">2017-07-06</div>
        <p>
          As a small sign of life, here's is 1.3.7 with some very minor fixes for the Java client and the JVM agent.
        </p>
        <p>
          Not much more to tell for now. Enjoy summer ;-) !
        </p>
      </subsection>
      <subsection name="Let's kickoff 2017 with 1.3.6">
        <div class="news-date">2017-04-03</div>
        <p>
          Wow, already April and half a year after the last release. Yes, it has been calm around Jolokia the last
          time. It's not because it lost its relevance, it's just because things are as they are. As much as I would
          love to progress faster, other exciting projects are eating up my time massively. Luckily Jolokia 1.x is really
          stable these days and used in a lot of products as their major monitoring interface. And as much I would love to
          finally kick off 2.0, there does not seem too much demand for it yet ;-(. Which is also a good thing as it proves
          that Jolokia 1.x is still absolutely sufficient for day to day needs. And it's even so that Jolokia stays even more
          relevant as <a href="https://ro14nd.de/java-management-is-dead">Java EE Management</a> (JSR-373) will never come.
          Of course, as times goes by, alternative monitoring interfaces for Java (like to <a href="https://prometheus.io/">Prometheus</a>)
          gain in importance. But as long JMX has some meaning for monitoring in the Java world, Jolokia is here to stay.
        </p>
        <p>
          So, what's new in 1.3.6 ?
        </p>
        <ul>
          <li>
            The <a href="https://github.com/rhuss/jolokia/issues/258">annoying issue</a> with the Jolokia agent when running
            under Wildfly and Wildfly Swarm has been tackled
            and solved. It was a bit tricky because of the special way how wildfly loads classes which makes it hard
            for any agent based approach to work within. Please try it, if there are still any issues with Wildfly
            based system, <a href="https://github.com/rhuss/jolokia/issues/new">let us know</a>.
          </li>
          <li>
            The <code>list</code> command now adds the class name of the MBean to the list of meta data returned.
          </li>
        </ul>
        <p>
          Although Jolokia 2 is not here yet, it's not dead. Branch 2.0 is fully rebase on the 1.3 line and the 2.0.0 milestone
          releases are still recommended support for notifications is required. It's quite stable, just not yet released.
          For Jolokia 1.x I don't expect any revolutionary changes in 2017, so you probably can expect a next 1.3.7 release
          in autumn, collecting all the bug fixes on the way.
        </p>
      </subsection>
      <subsection name="Polished with 1.3.5">
        <div class="news-date">2016-10-04</div>
        <p>
          Here comes a minor update with some smaller goodies:
        </p>
        <ul>
          <li>
            Support of JSON streaming also for the <code>AgentServlet</code> which is included in the WAR and OSGi Agent (in addition
            to the JVM agent which got this support in the last release). This leads to much less temporary heap memory
            consumption when serializing the internal JSON objects to character data in the HTTP response. You still
            need to be careful when doing large operations like <code>list</code> since there is still a full in-memory
            representation of the data sent.
          </li>
          <li>
            Avoid an NPE in the Websphere detector and added detection of a Payara server
          </li>
          <li>
            Re-add hooks for creating custom restrictors as protected methods in <code>AgentServlet</code> which allows
            for simple programmatic customization.
          </li>
        </ul>
      </subsection>
      <subsection name="Summer fun with Jolokia 1.3.4">
        <div class="news-date">2016-07-31</div>
        <p>
          It has beed taken a bit, but just right now befire the summerbreak 1.3.4 is here with
          some nice new <a href="changes-report.html">features</a>:
        </p>
        <ul>
          <li>
            SSL support for the J4pClient.
          </li>
          <li>
            JSON response streaming to reduce memory activity. This is enabled by default but can
            be switched off by setting the config option "streaming" to false.
          </li>
          <li>
            Allow a basic auth as alternative to client cert authentication when both a user and
            client certifcates are used.
          </li>
          <li>
            A "quiet" and a java.util.logging LogHandler which can be directly used.
          </li>
        </ul>
        <p>
          In parallel 2.0 takes comes into shape. The current version 2.0.0-M3 is available and already
          used with success in some production setups. In addition to the new features like notification support
          or new extension hooks, it is fully backwards comptabile to 1.x, except that some default values will
          be changed. However, an upgrade will be trivial. If you are curious, I'm going to present the new 2.0
          features at <a href="https://2016.javazone.no/program/jolokia-2-0">JavaZone</a> in September.
        </p>
        <p>
          That's it for now, enjoy your summer break ;-)
        </p>
      </subsection>
      <subsection name="Jolokia 1.3.3">
        <div class="news-date">2016-02-16</div>
        <p>
          Beside bug fixes as described in the <a href="changes-report.html">changelog</a>, this minor
          release brings some small features:
        </p>
        <ul>
          <li>
            Custom restrictors for tuning access control can be added to the JVM and WAR agents (which already
            is supported by the OSGi agent for quite some time)
          </li>
          <li>
            Global configuration option <code>allowErrorDetails</code> can be used when starting the agent to avoid
            exposure of stack traces and exception messages globally.
          </li>
          <li>
            Configuration <code>allowDnsReverseLookup</code> can be set to <code>false</code> in order to avoid
            reverse DNS lookup for doing security host checks. That also implies that if switched off only
            plain IP adressess can be used in a <code>jolokia-access.xml</code> policy file.
          </li>
          <li>
            The password for opening a JVM agent's keystore can now be encrypted, too. You can use the
            <code>java -jar jolokia-agent.jar encrypt</code> CLI to encrypt a password which then can be used in the
            agent's configuration.
          </li>
        </ul>
      </subsection>
      <subsection name="Welcome to 2016 - the year Jolokia 2.0 will see the light of day">
        <div class="news-date">2016-01-07</div>
        <p>
          We are getting closer. I'm happy to announce that the first
          milestone release 2.0.0-M1 is out and available from Maven central.
          Of course, it is highly experimental. The main new features are JMX notification support
          (pull and SSE mode) and refactorings leading to an internal modularization (which
          you will see when looking into WAR agent).
        </p>
        <p>
          I would be more than happy if you would try out the <a href="http://search.maven.org/remotecontent?filepath=org/jolokia/jolokia-agent-jvm/2.0.0-M1/jolokia-agent-jvm-2.0.0-M1-agent.jar">JAR</a> and
          <a href="http://search.maven.org/remotecontent?filepath=org/jolokia/jolokia-agent-war/2.0.0-M1/jolokia-agent-war-2.0.0-M1.war">WAR</a> agent which are supposed to be drop in replacements for Jolokia 1.3.2.
        </p>
        <p>
          More information can be found on my <a href="https://ro14nd.de">Blog</a>. Soon there will be also
          demo and screencast showing the new features.
        </p>
        <p>
          Jolokia 1.3.2 is still the latest stable version and will receive minor updates in the future, too.
        </p>
      </subsection>
      <subsection name="TLS updates for the JVM agent">
        <div class="news-date">2015-10-5</div>
        <p>
          It was quite calm around Jolokia this summer and not much
          happened in Jolokia-land. Not many bugs arrived, too,
          which I take as a good sign :)
        </p>
        <p>
          Now let's start a next round with some revamped TLS support
          for https connections. Version 1.3.2 introduces a handful of
          new options for advanced configuration of the JVM agent's
          TLS connector:
        </p>
        <p>
          In addition to the keystore (option
          <code>keystore</code>) the CA and the server cert as well
          as the server cert's key can be provided as PEM
          files with the options <code>caCert</code>,
          <code>serverCert</code> and <code>serverKey</code>,
          respectively.
        </p>
        <p>
          Client cert validation has also be enhanced. In addition to
          validating the CA signature of a client cert, one can now
          also check that the <em>extended key usage</em> block of the cert
          was created for client usage (option
          <code>extendedClientCheck</code>). Also, one or more
          principals can be configured with
          <code>clientPrincipal</code> which are also compared againt
          the subject within a client certificate.
        </p>
        <p>
          For simple use cases where no server validation is required,
          Jolokia is now able to create self-signed server
          certificates on the fly. This happens if neither a keystore
          nor a server PEM cert is provided. So, the easiest way to
          enable https is simply to add
          <code>protocol=https</code>. Of course, the client needs to
          disable cert validation then and it is recommended to use
          basic-authentication to authenticate the connection.
        </p>
        <p>
          The changes affect the <a
          href="https://jolokia.org/agent/jvm.html">JVM agent</a> only
          and are explained in the <a
          href="reference/html/agents.html#agents-jvm">reference
          manual</a>.
        </p>
        <p>
          That's it for now mostly, but see the <a
          href="changes-report.html">changelog</a> for some other minor
          additions. Progress on Jolokia 2.0 continues slowly, won't
          tell much here until I have a M1 release. No promises either
          :)
        </p>
      </subsection>
      <subsection name="Delegating Authentication with Jolokia 1.3.1">
        <div class="news-date">2015-05-28</div>
        <p>
          This minor release introduces one single new feature: A delegating authentication provider for the
          JVM agent. This can be switched on with configuration options and allow to delegate the authentication
          decision to an external service so that an easy SSO e.g. via OAuth2 is possible.
        </p>
        <p>
          For example, if you are an OpenShift user and want to participate in OpenShift's OAuth2 SSO, then you can
          specify the following startup parameters, assuming that you OpenShift API server is running as
          <code>openshift:8443</code>:
        </p>
        <pre class="prettyprint lang-bash"><![CDATA[
java -javaagent:jolokia.jar=\
                authMode=delegate,\
                authUrl=https://openshift:8443/osapi/v1beta3/users/~,\
                authPrincipalSpec=json:metadata/name,\
                authIgnoreCerts=true\
                ...
]]></pre>
        <p>
          More about this can be found in the <a href="reference/html/agents.html#agents-jvm">reference manual</a>.
          Note, that the parameter <code>authenticationClass</code> has been renamed to <code>authClass</code>
          for consistencies sake. Please raise an <a href="https://github.com/rhuss/jolokia/issues/new">issue</a> if this
          doesn't work for you.
        </p>
      </subsection>
      <subsection name="Jolokia 1.3.0">
        <div class="news-date">2015-05-07</div>
        <p>
          After quite some winter sleep Jolokia is back with a fresh
          release. This is mostly a <a href="changes-report.html">bug fix release</a> with some new features:
        </p>
        <ul>
          <li>A simple <code>MBeanPlugin</code> hook for registering own MBeans with the agent</li>
          <li>Support for OSGi's ConfigAdmin Service</li>
          <li>New possibility to hook into the deserialization process for responses in the Java client</li>
          <li>Proxy can be specified for the Java client</li>
          <li>Constructor based deserialization of Strings</li>
          <li>Support for Mule 3.6.1</li>
        </ul>
        <p>
          There is one important change in the default behaviour of the WAR agent: Up to 1.2.3 Jolokia truncates any
          collection in the response value at
          a threshold of 1000 elements by default. This limit can be overwritten
          permanently in the configuration or per request as query parameter
          (<code>maxCollectionSize</code>). However, it turned out that this limit was <a href="https://github.com/hawtio/hawtio/issues/1725">not
          large enough</a>. So the new default behaviour is to have <strong>no limit</strong> at
          all. As said, if you need it you always can set a hard limit in the
          agent's configuration.
        </p>
        <p>
          But the biggest news is probably something complete different: I'm
          super happy to announce that I (roland) joined Red Hat since May, where I will
          able to continue to work on Jolokia with an even higher
          intensity. Before looking into the future, acknowledgements go to my
          former employer <a href="http://www.consol.com">ConSol</a>. Without the support donated by ConSol Jolokia would
          probably never has been grown from the original personal pet project to a full
          featured, production ready JMX remote access solution as it is
          today. Thank you !
        </p>
        <p>
          What are the next steps ? <a href="http://www.slideshare.net/roland.huss/jolokia-devoxx2014/11">Jolokia</a>
          <a href="https://github.com/rhuss/jolokia/wiki">2.0</a> (code name: "Duke Nukem
          Forever") is not so far away, all changes from 1.x has been already
          merged up to the 2.0 branch. A release candidate should be available
          soon, however I can't give any estimates yet. But what I can say:
          Jolokia is alive and kicking more than ever!
        </p>
      </subsection>
      <subsection name="Autumn edition 1.2.3">
        <div class="news-date">2014-11-08</div>
        <p>
          Meh, that was a busy summer. Apologies for the delay and
          breaking the usual one-release-per-month cycle.
        </p>
        <p>
          Nevertheless there are some nice goodies in this release:
        </p>
        <ul>
          <li>
            SSL handling of the JVM agent has been fixed and
            improved. Authentication with client certificates works
            now and you have much more influence of the SSL
            setup. Kudos to <a
            href="https://github.com/nevenr">Neven Radovanović</a> for
            providing a patch.
          </li>
          <li>
            The Mule agent has been updated to support Mule
            3.5. Thanks to <a
            href="https://github.com/FeiWongReed">Fei Wong Reed</a>
            for the pull request.
          </li>
          <li>
            The configuration option "policyLocation" has now system
            property and environment expansions.
          </li>
          <li>
            Quite a bunch of bugs has been fixed. Please refer to the
            <a href="changes-report.html">changes report</a> for all
            changes.
          </li>
        </ul>
        <p>
          If you want to get a quick introduction into Jolokia and a
          peek preview to Jolokia 2.0 come to my "Tools in Action"
          session at <a
          href="http://cfp.devoxx.be/2014/talk/LVC-7834/Spicing_up_JMX_with_Jolokia">Devoxx</a>
          2014 in Antwerp.
        </p>
        <p>
          Last announcement for now: I started a blog at <a
          href="https://ro14nd.de">https://ro14nd.de</a> about
          various technical topics like Jolokia, Docker or other
          stuff.
        </p>
      </subsection>
      <subsection name="Knock, knock: Let's welcome 1.2.2">
        <div class="news-date">2014-06-14</div>
        <p>
          Let's welcome Jolokia's next minor release which is not <em>so</em>
          minor as it might seems.
        </p>
        <ul>
          <li>
            Custom authenticator support for the Java client. The
            standard authenticator allows preemptive authentication now
            as well.
          </li>
          <li>
            Support for "*" wildcard in paths. See below.
          </li>
          <li>
            Finally an update to json-simple-1.1.1 which is mavenized,
            but still has its issues and not much traction to fix
            it. No problem we have a good workaround and it is still
            rock solid.
          </li>
          <li>
            Bug fixes. Yep.
          </li>
        </ul>
        <p>
          The biggest new feature with the most impact is path
          wildcard support. You probably know <a
          href="reference/html/protocol.html#read">pattern read
          requests</a> which allow for fetching multiple patterns by
          using patterns for MBean names and attributes (not to be
          confused with <a
          href="reference/html/protocol.html#post-request">bulk
          requests</a>). When using pattern read requests, the value
          in the returned JSON structure is not a single return value
          for an attribute but a more complex structure containing the
          full MBean names and attributes which are matched by the
          pattern. Of course, it is not easy to use a path to navigate
          on this structure, the path has to know the full
          MBean name (well, why using a pattern then ?). That's the main
          reason why path access was not supported for pattern read
          requests up to release 1.2.1
        </p>
        <p>
          Starting with 1.2.2 it is possible to use "*" wildcards in
          patterns, which match a complete 'level' in the JSON
          object. This makes it easy to fetch all same-named
          attributes on arbitrary MBeans and extract only parts of
          their values. In fact, it is not so easy explain wildcard
          pathes, but here is a try (another try can be found in the <a
          href="reference/html/protocol.html#read">reference manual</a>):
        </p>
        <ul>
          <li>
            If using a literal path, then everything works as expected:
            The value the path points to is returned. Mostly this is a
            scalar value because that is what paths was introduced for.
          </li>
          <li>
            If the path contains a single "*" as a part, then when
            coming to <em>this level</em> everything is included. A
            path containing a wildcard cannot be a scalar anymore, but
            is a JSON object or array. The remaining path parts are
            included as described above to each element at this level.
          </li>
          <li>
            A path can contain multiple wildcards, but wildcards can
            be used only on its own. If a "*" is used as part of a
            path part (like 'current*'), it's taken literally (which
            most of the time doesn't make much sense). This might
            change in the future.
          </li>
          <li>
            The net effect is, that literal path parts are "squeezed"
            (i.e. removed) in the resulting answer, whereas wildcard
            parts stay as extra levels.
          </li>
        </ul>
        <p>
          You see, wildcard path handling is somewhat complex. For
          pattern read request they make quite some sense, for all
          other requests, I couldn't find good use cases yet. Please
          open an issue if any suspicious behaviour during
          path-wildcard using occurs.
        </p>
        <p>
          Finally, I would also like to mention a new GitHub project
          <a
          href="https://github.com/rhuss/jolokia-extra">jolokia-extra</a>
          which holds additional goodies. One design goal of Jolokia
          is to keep it focused. That's not so easy as there are tons
          of ideas out there, all backed by a particular use case. And
          they all want to get into the game. Beside that someone has
          to implement that (hint: still looking for contributions ;-), I
          opened a new playground for all that stuff which might not
          be of general interest but are still pearls. That's what
          <code>jolokia-extra</code> is for.
        </p>
        <p>
          The beginning makes a 1.5 year old <a
          href="https://github.com/rhuss/jolokia/pull/50">pull
          request</a> from <a href="https://github.com/mplonka">Marcin
          Płonka</a> (Thanks a lot and sorry for the long, long delay,
          BTW). It's all about simplifying access to JSR-77 enabled
          Java EE-Servers. You should know that <a
          href="https://jcp.org/en/jsr/detail?id=77">JSR 77: J2EE
          Management</a> was a cool attempt to standardize naming and
          JMX exposed metrics for Java EE. Unfortunately it was abandoned,
          but still lives in quite a bunch of Java EE servers. Not at its
          full beauty, but still valuable enough to be
          supported. Astonishingly, WebSphere, even the latest 8.5
          versions, has the best support for it. Using JSR-77 conform
          MBeans with plain Jolokia returns unnecessarily complex JSON
          structures which are hard to parse and
          understand. <code>jolokia-extra</code> adds a set of
          simplifier for make the usage with JSR-77 simpler (but add
          an extra of 50k to the agent). I recommend to have a look at it,
          especially if you are working with WebSphere.
        </p>
        <p>
          In the future, it might be the case, that some lesser used
          additions (Spring and Spring Roo integration, JBoss Forge
          support, ...) will go into <code>jolokia-extra</code> as well.
        </p>
        <p>
          Enough blubber, enjoy this release. And just in case, if
          anybody is wondering about 2.0 (BTW, is there
          <strong>anyone</strong> out there carrying about this next
          generation JMX transcended super-hero ?), just drop a note
          with twitter (<a
          href="https://twitter.com/jolokia_jmx">@jolokia_jmx</a>) or
          mail (<a
          href="mailto:2.0@jolokia.org">2.0@jolokia.org</a>).
        </p>


      </subsection>
      <subsection name="1.2.1 is in the house">
        <div class="news-date">2014-04-29</div>
        <p>
          This minor release fixes some bugs and brings some <a href="changes-report.html">smaller features</a>:
        </p>
        <ul>
          <li>An ActiveMQ server detector has been added</li>
          <li>
            The Java client library has been updated to the latest Apache HTTP components 4.x.
            If you are forced to still use Apache HTTP Client 3.x, you still can use the Java Client Lib from
            Jolokia 1.2.0 which will work with a Jolokia agent 1.2.1 nicely.</li>
          <li>Bug fix for JBoss 4.2.3 (yeah, seems still to be used)</li>
          <li>Cleaned up logging for discovery requests</li>
          <li>Placeholders can be used when specifying the agent URL which will be used in discovery responses.
            That way you can configure the URL flexibly from you server configuration.
          </li>
        </ul>
        <p>
          And finally there is an important addition to the configuration of Jolokia's access policy. You might know,
          that you can configure CORS so the agent allows access only from certain origins. CORS is used by browsers for
          cross origin sharing and is a pure client side check. I.e. the browser asks the server and if the server
          says "no" the browser forbids any Ajax request to this server from any script. However, this still allows
          non-Ajax requests from any origin. To restrict this, too, a new configuration directive <code>&lt;strict-checking&gt;</code>
          has been added to the <code>&lt;cors&gt;</code> section which, if given, will do also a server-side check of
          a <code>Origin:</code> header when provided by the browser. If a security policy is used, it is highly recommended to
          set this flag (which for compatibility reason is switched off by default). And yes, it is of course highly
          recommended to use a <a href="reference/html/security.html#security-policy">jolokia-access.xml</a> policy in production
          (and not only for servers exposed to the bad internet directly). This is especially important if you can access
          Jolokia agents directly via a browser which is also used for internet access
          (hint: <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">CSRF</a>).
        </p>
        <p>
          No news about 2.0 ? Yes, indeed. The giant is still sleeping, "Jolokia forever", you know. But the
          pressure rises, for some conferences I have some CFPs out which hopefully will lead to some nice CDD sessions
          ("conference driven development", yeah).
        </p>
      </subsection>
      <subsection name="Find your agents with 1.2.0">
        <div class="news-date">2014-02-24</div>
        <p>
          New year, new release. Ok, it's not the BIG 2.0 which I already somewhat promised. Anyways,
          another big feature jumped on the 1.x train in the last minute. It is now possible to find agents in your network by sending
          an UDP packet to the multicast group 239.192.48.84, port 24884. Agents having this discovery mechanism enabled
          will respond with their meta data including the access URL. This is especially
          useful for clients who want to provide access to agents without much configuration. I.e.
          the excellent <a href="http://hawt.io">hawt.io</a> will probably use it one way or the other. In fact, it was hawt.io
          which put me <a href="https://github.com/rhuss/jolokia/pull/126">on track</a> for this nice little feature ;-)
        </p>
        <p>
          Discovery is enabled by default for the <a href="reference/html/agents.html#agents-jvm">JVM agent</a>, but not for
          the <a href="reference/html/agents.html#agents-war">WAR</a> agent.
          It can be easily enabled for the WAR agent by using servlet init parameters, system properties or environment variables.
          All the nifty details can be found in the <a href="reference/html/index.html">reference manual</a>.
        </p>
        <p>
          The protocol for the discovery mechanism is also <a href="reference/html/protocol.html#discovery">specified</a> in the reference manual. One of the first clients
          supporting this discovery mode is <a href="http://search.cpan.org/~roland/jmx4perl/lib/JMX/Jmx4Perl.pm">Jmx4Perl</a> in its newest version. The Jolokia
          Java client will follow in one of the next minor releases.
        </p>
        <p>
          But you don't need client support for multicast requests if you know already the URL for one agent. Each
          agent registers a MBean <code>jolokia:type=Discovery</code> which perform the multicast discovery request for
          you if you trigger the operation <code>lookupAgents</code>. The returned value contains the agent information
          and is described <a href="reference/html/mbeans.html#mbean-discovery">here</a>.
        </p>
        <p>
          This feature has been tested in various environments, but since low level networking can be, well, "painful", I would
          ask you to open an <a href="https://github.com/rhuss/jolokia/issues">issue</a> in case of any problems.
        </p>
        <p>
          Although it has been quiet some time with respect to the shiny new Jolokia 2.0, I'm quite close to a first
          milestone. All planned features has been implemented in an initial version, what's missing is to finish the heavy
          refactoring and modularisation of the Jolokia core. More on this later, please stay tuned ...
        </p>
      </subsection>
      <subsection name="Tiny 1.1.5">
        <div class="news-date">2013-11-08</div>
        <p>
          This is by far the smallest release ever: A <a href="https://github.com/rhuss/jolokia/commit/98e62c0478b166d188e0c9f173b278a59eed1fc8#diff-cdf118c56620542b85bc48650eb8ddb6R162">single char</a>
          has been added on top of 1.1.4 fixing a silly bug when
          using Glassfish with the AMX system. So, no need to update if you are not using Glassfish.
        </p>
        <p>
          Next week is Devoxx time and as last year (and the years before) you have the change to meet <a href="https://twitter.com/ro14nd">me</a> in
          Antwerp. Ping me or look for the guy with the <a href="http://jolokia.spreadshirt.de/men-s-hooded-jacket-A17809556/">Jolokia hoodie</a> ;-)
        </p>
      </subsection>
      <subsection name="Step by step ... 1.1.4">
        <div class="news-date">2013-09-27</div>
        <p>
          Some bug fixes and two new features has been included for the <a href="changes-report.html">autumn release</a>:
        </p>
        <p>
          A new configuration parameter "<code>authenticatorClass</code>" can be used for the JVM agent to specify an
          alternate authentication handler in addition to the default one (which simply checks for user and password).
        </p>
        <p>
          With the configuration parameter "<code>logHandlerClass</code>" an alternative log handler can be specified. This can
          be used for the WAR and JVM agent in order to tweak Jolokia's logging behaviour. For the OSGi agent you already
          could use a <code>LogService</code> for customizing logging.
        </p>
        <p>
          That's it and I hope you enjoy this release. I know, I'm late with 2.0, but as things happens, I have too
          much to do in 'real life' (i.e. feeding my family ;-). But I still hope to get it out this year, and yes, the
          2.0 branch is growing (slowly).
        </p>
        <p>
          BTW, the slides to my talk for the small but very fine <a href="http://www.jayday.de">JayDay 2013</a> are <a href="http://www.jolokia.org/jayday-2013">online</a>, too.
          These are "implemented" in JavaScript including live demos, where the JavaScript can be directly inserted
          in the browser (tested with Chrome &amp; Firefox). For the sample code, simply push the blue buttons at the
          bottom of a <a href="http://www.jolokia.org/jayday-2013/#/step-20">demo slide</a>.
        </p>
      </subsection>

      <subsection name="Small fixes with 1.1.3">
        <div class="news-date">2013-07-30</div>
        <p>
          No big news in Jolokia land, but some bug fixes come with <a href="changes-report.html">1.1.3</a>. Especially some issues
          with the JavaScript client's
          basic authentication and cross origin requests has been fixed. Otherwise I'm busy with 2.0 (and tons
          of other stuff ...). You can have a sneak preview of Jolokia 2.0 on this <a href="https://github.com/rhuss/jolokia/tree/2.0">branch</a>
          including basic notification support and quite some refactoring with respect to the service architecture.
        </p>
        <p>
          So please stay tuned ....
        </p>
      </subsection>
      <subsection name="Stopover on the road to 2.0: Jolokia 1.1.2 released">
        <div class="news-date">2013-05-28</div>
        <p>
          In order to ease waiting for 2.0, Jolokia version 1.1.2 has been released. It contains some minor
          bug fixes as explained in the <a href="changes-report.html">changelog</a>. Depending on the bug reports and
          pull request dropping in there might be even a 1.1.3 release before 2.0 will be finished.
        </p>
        <p>
          In the meantime, you can also see Jolokia live at <a href="http://www.jayday.de/">JayDay</a> where I will give a talk about
          Jolokia's JavaScript support. The forthcoming JMX notification support will presented, too. It is also
          a good chance to have a cold bavarian beer with me ;-)
        </p>
      </subsection>
      <subsection name="Some small goodies served by 1.1.1">
        <div class="news-date">2013-03-27</div>
        <p>
          This last feature release before work on 2.0.0 starts brings
          some small goodies.
        </p>
        <ul>
          <li>
            <code>BigDecimal</code> and <code>BigInteger</code> can
            now be used for operation arguments and return values.
          </li>
          <li>
            A new processing parameter <a href="reference/html/protocol.html#processing-parameters"><code>ifModifiedSince</code></a>
            has been introduced. This parameter can be used with a
            timestamp for fetching the list of available MBeans only
            when there has been some changes in the MBean registration
            on any observed MBeanServer since that time. If there has
            been no changes an answer with status code "302" (Not
            modified) is returned. This feature is also supported for
            "search" requests. In a future version of Jolokia, there
            will be also custom support for own "read" and "exec"
            request so that expensive operations can be called
            conditionally.
          </li>
          <li>
            For the JVM agent, if a port of 0 is given, then an
            arbitrary free port will be selected and printed out on
            standard output as part of the Jolokia agent URL. If no
            host is given, the JVM agent will now bind to localhost
            and if host of "0.0.0.0" or "*" is provided, the agent
            will bind on all interfaces.
          </li>
          <li>
            For the Java client an extra property
            <code>errorValue</code> has been added which holds the
            JSON serialized exception if the processiong parameter
            <code>serializeException</code> is active.
          </li>
          <li>
            The JavaScript client's <a
            href="reference/html/clients.html#js-poller"><code>jolokia.register()</code></a>
            can now take an optional <code>config</code> element for
            specifying processing parameters for a certain scheduler
            job. Also, the new option <code>onlyIfModified</code> can
            be used so that the callback for list and search request
            is only called, if the set of registered MBean has
            changed. This is especially useful for web based client
            which want to refresh the MBean tree only if there are
            changes.
          </li>
          <li>
            The <code>Expires:</code> header of a Jolokia response
            has now a valid date as value (instead of '-1') which
            points to one hour in the past. This change should help
            clients which do not ignore according to RFC-2616 invalid
            date syntax and treat them as 'already expired'.
          </li>
        </ul>
        <p>
          Links to the corresponding GitHub issues and the bugs fixed
          in this release can be found in the <a
          href="changes-report.html">change report</a>.
        </p>
        <p>
          This is the last feature release in the 1.x series. Work has
          already started on exciting new features for Jolokia
          2.0. E.g. JMX notification support is coming, an initial
          pull model has been already implemented (on branch <a
          href="https://github.com/rhuss/jolokia/tree/notification">notification</a>). There
          are even more ideas and some refactorings will happening
          along with some modest changes in the module structure. So,
          please stay tuned ...
        </p>
      </subsection>
      <subsection name="1.1.0 with Spring support and @JsonMBean">
        <div class="news-date">2013-02-26</div>
        <p>
          It took some time, but it was worth it. Along with the usual bug fix parade,
          several new features has been added to Jolokia.
        </p>
        <p>
          A new module <code>jolokia-spring</code> has been added which makes integration of Jolokia in
          Spring applications even easier. Simply add the following line (along with the corresponding namespace) to you
          application context and agent will be fired up during startup:
        </p>
        <pre class="prettyprint lang-xml"><![CDATA[<jolokia:agent>
   <jolokia:config
           autoStart="true"
           host="0.0.0.0"
           port="8778"
   ....
   />
</jolokia:agent>]]></pre>
        <p>
          More details can be found here in the <a href="reference/html/jmx.html#jvm-spring">reference manual</a>.
        </p>
        <p>
          The new <code>jolokia-jmx</code> module provides an own
          MBeanServer which never gets exposed via JSR-160
          remoting. By registering your MBeans at the Jolokia
          MBeanServer you can make them exclusively available for
          Jolokia without worrying about JSR-160 access e.g. via
          <code>jconsole</code>. However, if you annotate your MBeans
          with <code>@JsonMBean</code> and register it at the Jolokia
          MBeanServer your get automatic translation of complex data
          types to JSON even for JSR-160 connections:
        </p>
        <div>
          <img src="images/jconsole-json-mbean.png"/>
        </div>
        <p>
          The details can be found <a href="reference/html/jmx.html">here</a>.
        </p>
        <p>
          Several new processing options enter the scene. These can be
          given either as global configuration parameters or as query
          parameters:
        </p>
        <ul>
          <li><strong>canonicalNaming</strong> influences the order of key properties in object names</li>
          <li><strong>serializeExceptions</strong> adds a JSON representation of exceptions in an error case</li>
          <li><strong>includeStackTrace</strong> can switch on/off the sending of an lengthy stack trace in an error case</li>
        </ul>
        <p>
          That's it for now, all changes are summarized as always in the <a href="changes-report.html">change report</a>.
        </p>
        <p>Some other, more organizational stuff for now:</p>
        <ul>
          <li>
            Bugtracking and feature requests switch over completely to <a href="https://github.com/rhuss/jolokia/issues">Github</a>.
            Since I'm currently collecting features for 2.0, it's a good time for feature requests ;-). All ideas entered
            at <a href="http://jolokia.idea.informer.com/">jolokia.idea.informer.com</a> has been transformed into Github issues.
          </li>
          <li>
            If you are close to Germany it might be of interest to you, that I'm giving a training on Jolokia and Jmx4Perl,
            with focus on Java Monitoring with Nagios. This will happen at 16./17.04.2013 in Munich, details can be
            found on our <a href="http://www.consol.de/open-source-monitoring/schulungen/java-monitoring-mit-nagios/">web site</a>
            (in german).
          </li>
        </ul>
        <p>
          And finally a very <strong>hot</strong> recommendation: Please have a look at <a href="http://hawt.io">hawt.io</a> a super cool
          HTML5 console which uses Jolokia for backend communication exclusively. Most of the new ideas included in this
          Jolokia release were inspired by discussions with James Strachan, one of the driving forces behind hawt. Thanks for that ;-)
        </p>
      </subsection>
      <subsection name="1.0.6 cosmetics">
        <div class="news-date">2012-11-23</div>
        <p>
          Although it has been quite calm in Jolokia land for some
          months, there is quite some momentum around Jolokia. This
          minor release brings some cosmetic changes, mostly for
          tuning the ordering within MBeans names and some JavaScript
          fixes. More on this in the <a
          href="changes-report.html">changelog</a>.
        </p>
        <p>
          Some other tidbits:
        </p>
        <ul>
          <li>The new <a href="talks.html">Talks and Screencast</a> section collects some fancy multimedia introducing Jolokia</li>
          <li>I'm going to talk about Jolokia at <a href="http://www.jayday.de/?lang=en">jayday 2012</a>, a brand new, low cost
          conference in Munich on 3th December 2012. Hopefully there will be some brand new stuff to show, too.</li>
          <li>Some completely irrelevant stuff: Jolokia T-Shirts can be found in the <a href="http://jolokia.spreadshirt.de/">Jolokia Shop</a>
            The shop was too easy to setup for not doing it ;-) And they look freaking hot .... </li>
        </ul>
      </subsection>
      <subsection name="Cubism support in 1.0.5">
        <div class="news-date">2012-07-22</div>
        <p>
          Jolokia 1.0.5 has been released. Beside minor <a
          href="changes-report.html">improvements and bug fixes</a>,
          one great new feature has been introduced: As already
          mentioned Jolokia has now support for <a
          href="http://square.github.com/cubism/">Cubism</a>, a fine
          time series charting library based on <a
          href="http://d3js.org/">d3.js</a>. Cubism provides
          support for an innovative charting type, the <a
          href="http://vis.berkeley.edu/papers/horizon/">horizon
          charts</a>:
        </p>
        <div>
          <img src="images/jolokia_cubism_demo_2.png"/><br/>
          <img src="images/jolokia_cubism_demo_1.png"/>
        </div>
        <p>
          A very cool live demo where a Jolokia JavaScript client
          fetches live data from our servers and plot it with Cubism
          can be found on this <a
          href="client/javascript-cubism.html">demo page</a>.
          The documentation can be found in the <a href="reference/html/clients.html#js-cubism">reference manual</a>.
        </p>
        <p>
          Jolokia uses also a <a
          href="http://travis-ci.org/#!/rhuss/jolokia">Travis</a>
          build in addition to our own <a
          href="http://labs.consol.de/jenkins">CI Server</a>. (Did I
          mentioned already, that we have a quite I high <a
          href="http://labs.consol.de/sonar/dashboard/index/org.jolokia:jolokia">Sonar</a> score
          ?). Travis is a quite nice supplement to Github, and brings CI
          testing to a higher level.
        </p>
        <p>
          That's it for now. The next months of my open-source work
          will be spent now on <a
          href="https://github.com/rhuss/aji">Ají</a>, Jolokia's new
          fancy sister. Sorry for pushing thinks like notifications
          down the Jolokia back-log, but it's not forgotten.
        </p>
      </subsection>
  </section>
</body>

</document>
